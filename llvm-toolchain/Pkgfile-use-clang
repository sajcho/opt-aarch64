# Description:	LLVM toolchain - llvm,clang,clang-tools-extra,compiler-rt,lld
# URL:		http://llvm.org/
# Maintainer:	Milan Buska, <milan dot buska at gmail dot com>
# Depends on:	cmake libxml2 ninja

name=llvm-toolchain
version=11.0.0rc2
release=1
source=(https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0-rc2/llvm-project-11.0.0rc2.tar.xz)

build() {
	cd llvm-project-$version

	mkdir build
	cd build

	export CC="clang"
	export CXX="clang++"

	cmake .. -G Ninja \
		-DCMAKE_BUILD_TYPE="Release" \
		-DCMAKE_INSTALL_PREFIX="/usr " \
		-DLLVM_TARGETS_TO_BUILD="AArch64" \
		-DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt;lld" \
		-DLLVM_DEFAULT_TARGET_TRIPLE="aarch64-linux-gnu" \
		-DLLVM_HOST_TRIPLE="aarch64-linux-gnu" \
		-DLLVM_BUILD_LLVM_DYLIB=ON \
		-DLLVM_LINK_LLVM_DYLIB=ON \
		-DLLVM_INSTALL_UTILS=ON \
		-DLLVM_ENABLE_FFI=ON \
		-DLLVM_ENABLE_ZLIB=ON \
		-DLLVM_ENABLE_PIC=ON \
		-DLLVM_ENABLE_RTTI=ON \
		-DLLVM_ENABLE_LLD=ON \
		-DLLVM_INCLUDE_EXAMPLES=OFF \
		-DLLVM_INCLUDE_TESTS=OFF \
		-DLLVM_ENABLE_OCAMLDOC=OFF \
		-DLLVM_PARALLEL_COMPILE_JOBS="${JOBS:-1}" \
		-DCLANG_VENDOR="SAUX Aarch64" \
		-DLLD_VENDOR="SAUX Aarch64" \
		-Wno-dev \
		../llvm

	ninja
	DESTDIR=$PKG ninja install

	mv $PKG/usr/libexec/{c++-analyzer,ccc-analyzer} $PKG/usr/lib/clang
	rmdir $PKG/usr/libexec
	sed -i 's|libexec|lib/clang|' $PKG/usr/bin/scan-build
}
